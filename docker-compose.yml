# 安全加固的 Docker Compose 配置文件
# 包含资源限制、安全配置和监控功能

version: '3.8'

# 安全配置全局变量
x-security-opts: &security-opts
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  read_only: true
  
x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
      
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  start_period: 15s
  retries: 3

services:
  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: clash-converter-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend/config.yaml:/app/config.yaml:ro
      - ./backend/logs:/app/logs
    networks:
      - clash-network
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # 安全配置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false  # 后端需要写日志
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/temp:noexec,nosuid,size=50m
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      start_period: 15s
      retries: 3
    
    # 日志配置
    <<: *logging

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:${BACKEND_PORT:-8000}
        - VITE_APP_PREFIX=/
    container_name: clash-converter-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - clash-network
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # 安全配置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run/nginx:noexec,nosuid,size=10m
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      start_period: 15s
      retries: 3
    
    # 日志配置
    <<: *logging

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:1.24-alpine
    container_name: clash-converter-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:8080"
      - "${NGINX_HTTPS_PORT:-443}:8443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - clash-network
    profiles:
      - nginx  # 使用 --profile nginx 来启用
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    
    # 安全配置
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=10m
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      start_period: 15s
      retries: 3
    
    # 日志配置
    <<: *logging

networks:
  clash-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
    driver_opts:
      com.docker.network.bridge.name: clash-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    
  # 隔离的公共网络（可选）
  public:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
    driver_opts:
      com.docker.network.bridge.name: clash-public
      com.docker.network.bridge.enable_icc: "false"

volumes:
  backend-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backend/logs
  
  # 安全的临时存储
  temp-data:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=10001,gid=10001