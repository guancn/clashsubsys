# Nginx 反向代理配置文件
# 用户可自定义端口配置

# 主配置文件模板
# 用户需要根据实际情况修改端口和域名

# 用户自定义变量（通过环境变量或手动修改）
# FRONTEND_PORT: 前端服务端口，默认 3000
# BACKEND_PORT: 后端服务端口，默认 8000
# NGINX_PORT: Nginx 监听端口，默认 80
# DOMAIN: 域名，默认 localhost

upstream backend {
    # 后端服务地址 - 可根据需要修改端口
    server localhost:8000;
    # 如果使用 Docker，使用容器名
    # server backend:8000;
    
    # 负载均衡配置（多实例时启用）
    # server localhost:8001;
    # server localhost:8002;
}

upstream frontend {
    # 前端服务地址 - 可根据需要修改端口
    server localhost:3000;
    # 如果使用 Docker，使用容器名
    # server frontend:80;
}

# 限制请求速率
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=30r/s;

# 缓存设置
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m 
                 inactive=60m use_temp_path=off;

server {
    # 监听端口 - 用户可自定义
    listen 80;
    listen [::]:80;
    
    # 域名配置 - 用户需要修改为自己的域名
    server_name localhost your-domain.com;
    
    # 日志文件
    access_log /var/log/nginx/clash-converter-access.log;
    error_log /var/log/nginx/clash-converter-error.log;
    
    # 安全头设置
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 客户端最大上传大小
    client_max_body_size 10M;
    
    # 前端静态文件
    location / {
        # 应用一般限制
        limit_req zone=general_limit burst=10 nodelay;
        
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 前端代理超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # API 接口代理
    location /api/ {
        # 应用 API 限制
        limit_req zone=api_limit burst=5 nodelay;
        
        proxy_pass http://backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API 代理超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;  # 转换可能需要较长时间
        proxy_read_timeout 60s;
        
        # 缓存设置（GET 请求）
        proxy_cache api_cache;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_methods GET HEAD;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        
        # 添加缓存状态头
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # 订阅文件下载（支持长期缓存）
    location /api/sub/ {
        # 应用一般限制
        limit_req zone=general_limit burst=20 nodelay;
        
        proxy_pass http://backend/sub/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 订阅文件缓存设置
        proxy_cache api_cache;
        proxy_cache_valid 200 60m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        
        # 支持断点续传
        proxy_set_header Range $http_range;
        proxy_set_header If-Range $http_if_range;
    }
    
    # 健康检查
    location /health {
        access_log off;
        proxy_pass http://backend/health;
        proxy_set_header Host $host;
    }
    
    # API 文档
    location /docs {
        proxy_pass http://backend/docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /redoc {
        proxy_pass http://backend/redoc;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 静态文件优化（如果直接通过 Nginx 提供静态文件）
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://frontend;
        
        # 静态文件缓存
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 压缩
        gzip on;
        gzip_vary on;
        gzip_types text/css application/javascript image/svg+xml;
    }
    
    # 安全配置 - 隐藏敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* \.(env|bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
}

# HTTPS 配置（可选）
# 用户需要配置 SSL 证书
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    # 域名配置 - 用户需要修改
    server_name your-domain.com;
    
    # SSL 证书配置 - 用户需要提供证书文件
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # 其他配置与 HTTP 相同
    include /etc/nginx/conf.d/clash-converter-common.conf;
}

# HTTP 重定向到 HTTPS（启用 HTTPS 时取消注释）
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }