# 生产环境安全加固的 Nginx 配置
# 企业级安全、性能和监控配置

# 运行用户（非特权用户）
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx/nginx.pid;

# 优化worker配置
worker_rlimit_nofile 65535;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # 基本MIME类型
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 安全配置
    server_tokens off;
    more_clear_headers 'Server';
    more_clear_headers 'X-Powered-By';

    # 日志格式（包含安全信息）
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format security '$time_local $remote_addr "$request" $status '
                       '$body_bytes_sent "$http_referer" "$http_user_agent" '
                       '"$http_x_forwarded_for" $request_time';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/security.log security;

    # 性能优化配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # 缓冲区配置
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;

    # Gzip压缩配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Brotli压缩配置（如果可用）
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap;

    # 速率限制配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:100m max_size=1g 
                     inactive=60m use_temp_path=off;

    # 后端服务配置
    upstream clash_backend {
        server clash-backend:8000 max_fails=3 fail_timeout=30s;
        # 如果有多个后端实例，可以添加更多服务器
        # server clash-backend-2:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream clash_frontend {
        server clash-frontend:8080 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # 地理位置阻止（示例：阻止某些国家的访问）
    # geo $blocked_country {
    #     default 0;
    #     include /etc/nginx/conf.d/blocked_countries.conf;
    # }

    # 主服务器配置
    server {
        listen 8080 default_server;
        listen [::]:8080 default_server;
        server_name _;

        # 根目录
        root /usr/share/nginx/html;
        index index.html index.htm;

        # 地理位置阻止
        # if ($blocked_country) {
        #     return 444;
        # }

        # 连接限制
        limit_conn conn_limit_per_ip 20;

        # 强化安全头
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        add_header X-Download-Options "noopen" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https:; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
        
        # HTTPS强制（如果启用了HTTPS）
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # 隐私和权限策略
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), fullscreen=(self), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=(), ambient-light-sensor=()" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Resource-Policy "same-site" always;

        # 缓存控制
        expires $expires;

        # 自定义错误页面
        error_page 400 401 403 404 /40x.html;
        error_page 500 502 503 504 /50x.html;

        # API接口代理
        location /clash/api/ {
            # 速率限制
            limit_req zone=api burst=20 nodelay;
            
            # 移除前缀并代理到后端
            rewrite ^/clash/api/(.*) /$1 break;
            proxy_pass http://clash_backend;
            
            # 代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # 缓存配置
            proxy_cache api_cache;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_methods GET HEAD;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_bypass $http_pragma;
            proxy_cache_revalidate on;
            
            # 缓存状态头
            add_header X-Cache-Status $upstream_cache_status;
        }

        # 前端静态文件
        location /clash/ {
            # 速率限制
            limit_req zone=static burst=50 nodelay;
            
            # 移除clash前缀并代理到前端
            rewrite ^/clash/(.*) /$1 break;
            proxy_pass http://clash_frontend;
            
            # 代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 静态文件缓存
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                proxy_pass http://clash_frontend;
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";
                access_log off;
            }
        }

        # 根路径重定向
        location = / {
            return 301 /clash/;
        }

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            
            # 移除安全头（健康检查不需要）
            more_clear_headers 'X-Frame-Options';
            more_clear_headers 'Content-Security-Policy';
        }

        # Nginx状态页面（内部监控用）
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.30.0.0/24;  # 允许Docker网络
            deny all;
        }

        # 禁止访问敏感文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(env|log|bak|backup|swp|old|tmp|sql|gz|tar)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 禁止访问配置文件
        location ~* \.(conf|config|ini|yml|yaml)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 防止PHP执行（如果不需要PHP）
        location ~* \.(php|php5|phtml|pht|phps)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 处理favicon和robots.txt
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            expires 1y;
        }

        location = /robots.txt {
            access_log off;
            log_not_found off;
            expires 1d;
        }
    }

    # HTTPS服务器配置
    server {
        listen 8443 ssl http2;
        listen [::]:8443 ssl http2;
        server_name sub.guancn.me;  # 替换为实际域名

        # SSL证书配置
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # SSL安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # 其他配置继承自HTTP服务器
        # ... (复制上面的location配置)
    }

    # 安全配置：阻止不良User-Agent
    map $http_user_agent $blocked_agent {
        default 0;
        ~*malicious 1;
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
    }

    # 如果需要阻止某些User-Agent，在server块中添加：
    # if ($blocked_agent) {
    #     return 444;
    # }

    # 包含其他配置文件
    include /etc/nginx/conf.d/*.conf;
}